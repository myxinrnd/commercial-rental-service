import React, { useEffect, useRef, useState, memo, useMemo, useCallback } from 'react';
import type { Listing } from '../types';

interface YandexMapProps {
  listings: Listing[];
  onMarkerClick?: (listing: Listing) => void;
  center?: [number, number];
  zoom?: number;
  className?: string;
}

declare global {
  interface Window {
    ymaps: any;
    showListingDetails: (listingId: string) => void;
  }
}

const YandexMap: React.FC<YandexMapProps> = memo(({
  listings,
  onMarkerClick,
  center = [55.76, 37.64], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  zoom = 10,
  className = ''
}) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstance = useRef<any>(null);
  const [isLoaded, setIsLoaded] = useState(false);
  const lastHashRef = useRef<string>('');

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  const validListings = useMemo(() => {
    return listings.filter(listing => listing.coordinates);
  }, [listings]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ–º–æ–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const listingsHash = useMemo(() => {
    return validListings.map(l => `${l.id}-${l.coordinates?.lat}-${l.coordinates?.lng}`).join(',');
  }, [validListings]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É
  const handleMarkerClick = useCallback((listing: Listing) => {
    if (onMarkerClick) {
      onMarkerClick(listing);
    }
  }, [onMarkerClick]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º API Yandex Maps
  useEffect(() => {
    if (window.ymaps) {
      setIsLoaded(true);
      return;
    }

    const script = document.createElement('script');
    script.src = 'https://api-maps.yandex.ru/2.1/?lang=ru_RU';
    script.async = true;
    script.onload = () => {
      window.ymaps.ready(() => {
        setIsLoaded(true);
      });
    };
    script.onerror = () => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API');
    };
    document.head.appendChild(script);

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ API –≥–ª–æ–±–∞–ª—å–Ω—ã–π
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!isLoaded || !mapRef.current) return;

    const map = new window.ymaps.Map(mapRef.current, {
      center: center,
      zoom: zoom,
      controls: ['zoomControl', 'fullscreenControl', 'geolocationControl'],
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
      type: 'yandex#map',
      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑—É–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
      restrictMapArea: false,
      avoidFractionalZoom: false
    });

    mapInstance.current = map;

    return () => {
      if (mapInstance.current) {
        mapInstance.current.destroy();
      }
    };
  }, [isLoaded, center, zoom]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
  useEffect(() => {
    console.log('üó∫Ô∏è Markers effect triggered:', {
      hasMapInstance: !!mapInstance.current,
      listingsHash,
      validListingsCount: validListings.length,
      hasYmaps: !!window.ymaps
    });
    
    if (!mapInstance.current || !listingsHash) {
      console.log('üö´ Exiting early: missing mapInstance or listingsHash');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–∞–ª—å–Ω–æ hash (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É)
    if (lastHashRef.current === listingsHash && lastHashRef.current !== '') {
      console.log('üîÑ Hash unchanged, skipping markers update');
      return;
    }
    
    console.log('‚úÖ Updating markers, hash changed:', lastHashRef.current, '->', listingsHash);
    lastHashRef.current = listingsHash;

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    mapInstance.current.geoObjects.removeAll();

    if (!validListings.length) {
      console.log('üö´ No valid listings with coordinates');
      return;
    }

    console.log('üìç Creating markers for', validListings.length, 'listings');

    // –°–æ–∑–¥–∞–µ–º ObjectManager –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const objectManager = new window.ymaps.ObjectManager({
      clusterize: true,
      gridSize: 32,
      clusterDisableClickZoom: true
    });

    console.log('üèóÔ∏è ObjectManager created:', objectManager);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ObjectManager
    const features = validListings.map((listing, index) => ({
      type: 'Feature',
      id: index,
      geometry: {
        type: 'Point',
        coordinates: [listing.coordinates!.lat, listing.coordinates!.lng]
      },
      properties: {
        balloonContentHeader: listing.title,
        balloonContentBody: `
          <div style="max-width: 300px;">
            <p><strong>${listing.area} –º¬≤</strong></p>
            <p>${listing.description.substring(0, 100)}...</p>
            <p><strong>–¶–µ–Ω–∞: ${listing.price.toLocaleString()} ‚ÇΩ/–º–µ—Å</strong></p>
            <p>üìç ${listing.location}</p>
          </div>
        `,
        balloonContentFooter: `<button onclick="window.showListingDetails('${listing.id}')" style="
          background: #0D64A6; 
          color: white; 
          border: none; 
          padding: 8px 16px; 
          border-radius: 4px; 
          cursor: pointer;
        ">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>`,
        hintContent: `${listing.title} - ${listing.price.toLocaleString()} ‚ÇΩ`,
        listingId: listing.id
      },
      options: {
        preset: 'islands#blueCircleDotIcon'
      }
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ObjectManager
    console.log('üéØ Adding features to ObjectManager:', features.length, 'features');
    objectManager.add({ type: 'FeatureCollection', features: features });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É
    objectManager.objects.events.add('click', (e: any) => {
      const objectId = e.get('objectId');
      const listing = validListings[objectId];
      console.log('üìå Marker clicked:', { objectId, listing: listing?.title });
      if (listing && handleMarkerClick) {
        handleMarkerClick(listing);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º ObjectManager –Ω–∞ –∫–∞—Ä—Ç—É
    console.log('üó∫Ô∏è Adding ObjectManager to map');
    mapInstance.current.geoObjects.add(objectManager);
    
    console.log('‚ú® Markers setup complete!');
    


    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    if (validListings.length > 0) {
      const coordinates = validListings.map(listing => [listing.coordinates!.lat, listing.coordinates!.lng]);
      
      if (coordinates.length > 1) {
        mapInstance.current.setBounds(coordinates, {
          checkZoomRange: true,
          zoomMargin: 20
        });
      } else if (coordinates.length === 1) {
        mapInstance.current.setCenter(coordinates[0], 15);
      }
    }
  }, [listingsHash, validListings, handleMarkerClick]);

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
  useEffect(() => {
    window.showListingDetails = (listingId: string) => {
      const listing = listings.find(l => l.id === listingId);
      if (listing && onMarkerClick) {
        onMarkerClick(listing);
      }
    };

    return () => {
      if ('showListingDetails' in window) {
        delete (window as any).showListingDetails;
      }
    };
  }, [listings, onMarkerClick]);

  if (!isLoaded) {
    return (
      <div className={`map-container ${className}`}>
        <div className="map-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`map-container ${className}`}>
      <div ref={mapRef} className="yandex-map" />
    </div>
  );
});

YandexMap.displayName = 'YandexMap';

export default YandexMap;
