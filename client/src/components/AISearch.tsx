import React, { useState } from 'react';
import './AISearch.css';

interface Listing {
  id: string;
  title: string;
  description: string;
  area: number;
  price: number;
  location: string;
  type: string;
  floor: number;
  totalFloors: number;
  hasParking: boolean;
  hasStorage: boolean;
  contactName: string;
  contactPhone: string;
  contactEmail: string;
  images: string[];
  createdAt: string;
  isActive: boolean;
}

interface AISearchProps {
  listings: Listing[];
  onResults: (results: Listing[]) => void;
  onClear: () => void;
}

// AI –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞
class AISearchEngine {
  private static readonly KEYWORDS = {
    // –¢–∏–ø—ã –ø–æ–º–µ—â–µ–Ω–∏–π
    types: {
      '–º–∞–≥–∞–∑–∏–Ω': ['–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª—è', '–ø—Ä–æ–¥–∞–∂–∞', '—Ä–∏—Ç–µ–π–ª', '—Ä–æ–∑–Ω–∏—Ü–∞'],
      '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–±–∞—Ä', '–æ–±—â–µ–ø–∏—Ç', '–µ–¥–∞', '–ø–∏—Ç–∞–Ω–∏–µ', '–∫—É—Ö–Ω—è'],
      '–æ—Ñ–∏—Å': ['–æ—Ñ–∏—Å', '—Ä–∞–±–æ—Ç–∞', '–±–∏–∑–Ω–µ—Å', '–¥–µ–ª–æ–≤–æ–π', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π', 'IT', '–∞–π—Ç–∏'],
      '—Å–∫–ª–∞–¥': ['—Å–∫–ª–∞–¥', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Ç–æ–≤–∞—Ä—ã', '–≥—Ä—É–∑–æ–≤–æ–π']
    },
    
    // –†–∞–∑–º–µ—Ä—ã
    sizes: {
      '–º–∞–ª–µ–Ω—å–∫–∏–π': { min: 0, max: 50 },
      '–Ω–µ–±–æ–ª—å—à–æ–π': { min: 50, max: 100 },
      '—Å—Ä–µ–¥–Ω–∏–π': { min: 100, max: 200 },
      '–±–æ–ª—å—à–æ–π': { min: 200, max: 500 },
      '–æ–≥—Ä–æ–º–Ω—ã–π': { min: 500, max: Infinity }
    },
    
    // –¶–µ–Ω—ã
    prices: {
      '–¥–µ—à–µ–≤–æ': { min: 0, max: 50000 },
      '–Ω–µ–¥–æ—Ä–æ–≥–æ': { min: 50000, max: 100000 },
      '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': { min: 100000, max: 200000 },
      '–¥–æ—Ä–æ–≥–æ': { min: 200000, max: 500000 },
      '–ø—Ä–µ–º–∏—É–º': { min: 500000, max: Infinity }
    },
    
    // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    features: {
      '–ø–∞—Ä–∫–æ–≤–∫–∞': ['–ø–∞—Ä–∫–æ–≤–∫–∞', '–ø–∞—Ä–∫–∏–Ω–≥', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ'],
      '—Å–∫–ª–∞–¥': ['—Å–∫–ª–∞–¥', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ø–æ–¥—Å–æ–±–∫–∞'],
      '—Ü–µ–Ω—Ç—Ä': ['—Ü–µ–Ω—Ç—Ä', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', 'downtown'],
      '–º–µ—Ç—Ä–æ': ['–º–µ—Ç—Ä–æ', '—Å—Ç–∞–Ω—Ü–∏—è', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
      '–ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂': ['–ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂', '1 —ç—Ç–∞–∂', '–ø–∞—Ä—Ç–µ—Ä'],
      '–≤—ã—Å–æ–∫–∏–π —ç—Ç–∞–∂': ['–≤—ã—Å–æ–∫–∏–π —ç—Ç–∞–∂', '–≤–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂', '–≤–∏–¥']
    }
  };

  static search(query: string, listings: Listing[]): Listing[] {
    const normalizedQuery = query.toLowerCase().trim();
    
    if (!normalizedQuery) {
      return listings;
    }

    const scoredListings = listings.map(listing => ({
      listing,
      score: this.calculateScore(normalizedQuery, listing)
    }));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
    scoredListings.sort((a, b) => b.score - a.score);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (score > 0)
    return scoredListings
      .filter(item => item.score > 0)
      .map(item => item.listing);
  }

  private static calculateScore(query: string, listing: Listing): number {
    let score = 0;
    const text = `${listing.title} ${listing.description} ${listing.location} ${listing.type}`.toLowerCase();

    // 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
    if (text.includes(query)) {
      score += 100;
    }

    // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø–æ–º–µ—â–µ–Ω–∏–π
    for (const [type, keywords] of Object.entries(this.KEYWORDS.types)) {
      if (keywords.some(keyword => query.includes(keyword))) {
        if (listing.type.toLowerCase().includes(type)) {
          score += 50;
        }
      }
    }

    // 3. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
    for (const [size, range] of Object.entries(this.KEYWORDS.sizes)) {
      if (query.includes(size)) {
        if (listing.area >= range.min && listing.area <= range.max) {
          score += 30;
        }
      }
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
    for (const [priceLevel, range] of Object.entries(this.KEYWORDS.prices)) {
      if (query.includes(priceLevel)) {
        if (listing.price >= range.min && listing.price <= range.max) {
          score += 30;
        }
      }
    }

    // 5. –ê–Ω–∞–ª–∏–∑ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
    for (const [feature, keywords] of Object.entries(this.KEYWORDS.features)) {
      if (keywords.some(keyword => query.includes(keyword))) {
        switch (feature) {
          case '–ø–∞—Ä–∫–æ–≤–∫–∞':
            if (listing.hasParking) score += 25;
            break;
          case '—Å–∫–ª–∞–¥':
            if (listing.hasStorage) score += 25;
            break;
          case '—Ü–µ–Ω—Ç—Ä':
            if (listing.location.toLowerCase().includes('—Ü–µ–Ω—Ç—Ä')) score += 20;
            break;
          case '–º–µ—Ç—Ä–æ':
            if (listing.location.toLowerCase().includes('–º–µ—Ç—Ä–æ') || 
                listing.description.toLowerCase().includes('–º–µ—Ç—Ä–æ')) score += 20;
            break;
          case '–ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂':
            if (listing.floor === 1) score += 15;
            break;
          case '–≤—ã—Å–æ–∫–∏–π —ç—Ç–∞–∂':
            if (listing.floor > 5) score += 15;
            break;
        }
      }
    }

    // 6. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–ø–ª–æ—â–∞–¥—å, —Ü–µ–Ω–∞)
    const numbers = query.match(/\d+/g);
    if (numbers) {
      numbers.forEach(numStr => {
        const num = parseInt(numStr);
        
        // –ï—Å–ª–∏ —á–∏—Å–ª–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–ª–æ—â–∞–¥—å (–¥–æ 1000)
        if (num <= 1000 && Math.abs(listing.area - num) <= 20) {
          score += 40;
        }
        
        // –ï—Å–ª–∏ —á–∏—Å–ª–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É (–±–æ–ª—å—à–µ 1000)
        if (num > 1000 && Math.abs(listing.price - num) <= num * 0.2) {
          score += 40;
        }
      });
    }

    // 7. –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const queryWords = query.split(/\s+/);
    const matchedWords = queryWords.filter(word => 
      word.length > 2 && text.includes(word)
    );
    
    if (matchedWords.length > 0) {
      score += (matchedWords.length / queryWords.length) * 20;
    }

    return score;
  }
}

const AISearch: React.FC<AISearchProps> = ({ listings, onResults, onClear }) => {
  const [query, setQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [suggestions] = useState([
    "–ò—â—É –Ω–µ–±–æ–ª—å—à–æ–π –º–∞–≥–∞–∑–∏–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ —Å –ø–∞—Ä–∫–æ–≤–∫–æ–π",
    "–ù—É–∂–µ–Ω –æ—Ñ–∏—Å –¥–æ 100 –∫–≤.–º –Ω–µ–¥–æ—Ä–æ–≥–æ",
    "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ —Å –±–æ–ª—å—à–æ–π –ø–ª–æ—â–∞–¥—å—é",
    "–°–∫–ª–∞–¥ —Å —Ö–æ—Ä–æ—à–µ–π –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π",
    "–¢–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ –¥–æ 150000",
    "–ö–∞—Ñ–µ —Å —Ç–µ—Ä—Ä–∞—Å–æ–π –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞–π–æ–Ω–µ"
  ]);

  const handleSearch = async () => {
    if (!query.trim()) {
      onClear();
      return;
    }

    setIsSearching(true);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∏"
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const results = AISearchEngine.search(query, listings);
    onResults(results);
    
    setIsSearching(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setQuery(suggestion);
  };

  const handleClear = () => {
    setQuery('');
    onClear();
  };

  return (
    <div className="ai-search">
      <div className="ai-search-header">
        <h3>ü§ñ AI-–ü–æ–∏—Å–∫ –ø–æ–º–µ—â–µ–Ω–∏–π</h3>
        <p>–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º</p>
      </div>

      <div className="ai-search-input">
        <div className="search-input-wrapper">
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò—â—É –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–æ 100000 —Ä—É–±–ª–µ–π'"
            className="ai-search-field"
            disabled={isSearching}
          />
          {query && (
            <button 
              onClick={handleClear}
              className="clear-button"
              title="–û—á–∏—Å—Ç–∏—Ç—å"
            >
              √ó
            </button>
          )}
        </div>
        
        <button 
          onClick={handleSearch}
          className={`ai-search-button ${isSearching ? 'searching' : ''}`}
          disabled={isSearching}
        >
          {isSearching ? (
            <>
              <span className="spinner"></span>
              –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
            </>
          ) : (
            'üîç –ù–∞–π—Ç–∏'
          )}
        </button>
      </div>

      <div className="ai-suggestions">
        <p>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</p>
        <div className="suggestions-list">
          {suggestions.map((suggestion, index) => (
            <button
              key={index}
              onClick={() => handleSuggestionClick(suggestion)}
              className="suggestion-chip"
              disabled={isSearching}
            >
              {suggestion}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AISearch;
